name: Release & Changelog

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js for release management
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Install EF Tools
        run: |
          dotnet tool install --global dotnet-ef

      - name: Restore dependencies
        run: |
          dotnet restore

      - name: Install release tools
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git conventional-changelog-cli

      - name: Build & publish server and client for all platforms
        run: |
          mkdir -p release_artifacts

          # Build server for all platforms
          dotnet publish ./Server/Server.csproj -c Release -r win-x64 --self-contained true -o release_artifacts/server-win
          dotnet publish ./Server/Server.csproj -c Release -r linux-x64 --self-contained true -o release_artifacts/server-linux
          dotnet publish ./Server/Server.csproj -c Release -r osx-x64 --self-contained true -o release_artifacts/server-osx

          # Build client (TUI) for all platforms
          dotnet publish ./Client/Client.csproj -c Release -r win-x64 --self-contained true -o release_artifacts/client-win
          dotnet publish ./Client/Client.csproj -c Release -r linux-x64 --self-contained true -o release_artifacts/client-linux
          dotnet publish ./Client/Client.csproj -c Release -r osx-x64 --self-contained true -o release_artifacts/client-osx

      - name: Zip Artifacts
        run: |
          cd release_artifacts
          zip -r server-win-x64.zip server-win
          zip -r server-linux-x64.zip server-linux
          zip -r server-osx-x64.zip server-osx
          zip -r client-win-x64.zip client-win
          zip -r client-linux-x64.zip client-linux
          zip -r client-osx-x64.zip client-osx
          cd ..

      - name: Build Docker image for server
        run: |
          # Build the Docker image with latest tag
          docker build -t whysoserious:latest -f ./Server/Dockerfile ./Server
          
          # Optionally save the image as a tar file for distribution
          docker save whysoserious:latest -o release_artifacts/whysoserious-image.tar

      - name: Run Semantic Release and get version
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release to create the actual release
          npx semantic-release --no-ci
          
          # Get the latest tag that was created by semantic-release
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Released version: $LATEST_TAG"

      - name: Build and push Docker image to GHCR with version tag
        if: steps.semantic-release.outputs.version && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION=${{ steps.semantic-release.outputs.version }}
          echo "Pushing Docker image with version: $VERSION"
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Tag the existing local image with version and push both tags
          docker tag whysoserious:latest ghcr.io/${{ github.repository_owner }}/whysoserious:latest
          docker tag whysoserious:latest ghcr.io/${{ github.repository_owner }}/whysoserious:$VERSION
          
          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/whysoserious:latest
          docker push ghcr.io/${{ github.repository_owner }}/whysoserious:$VERSION
          
          echo "Successfully pushed tags: latest and $VERSION"