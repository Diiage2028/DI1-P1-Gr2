// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Persistence;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(WssDbContext))]
    [Migration("20250924132438_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Company", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Treasury")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000000);

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Server.Models.Consultant", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SalaryRequirement")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("consultants", (string)null);
                });

            modelBuilder.Entity("Server.Models.Employee", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Salary")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("GameId");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Server.Models.Game", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rounds")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Waiting");

                    b.HasKey("Id");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Server.Models.InTraining", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer");

                    b.Property<int>("StartRoundId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeId", "TrainingId", "StartRoundId");

                    b.HasIndex("StartRoundId");

                    b.HasIndex("TrainingId");

                    b.ToTable("in_trainings", (string)null);
                });

            modelBuilder.Entity("Server.Models.Player", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Server.Models.Round", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("Server.Models.Skill", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("skills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 4,
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 5,
                            Name = "React"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vue.js"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Express.js"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Django"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Flask"
                        },
                        new
                        {
                            Id = 14,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Laravel"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Spring Boot"
                        },
                        new
                        {
                            Id = 17,
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 18,
                            Name = "NoSQL"
                        },
                        new
                        {
                            Id = 19,
                            Name = "GraphQL"
                        },
                        new
                        {
                            Id = 20,
                            Name = "REST APIs"
                        });
                });

            modelBuilder.Entity("Server.Models.Training", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NbRound")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("trainings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 5000,
                            Name = "Formation HTML",
                            NbRound = 2,
                            SkillId = 1
                        },
                        new
                        {
                            Id = 2,
                            Cost = 5000,
                            Name = "Formation CSS",
                            NbRound = 2,
                            SkillId = 2
                        },
                        new
                        {
                            Id = 3,
                            Cost = 5000,
                            Name = "Formation JavaScript",
                            NbRound = 2,
                            SkillId = 3
                        },
                        new
                        {
                            Id = 4,
                            Cost = 5000,
                            Name = "Formation TypeScript",
                            NbRound = 2,
                            SkillId = 4
                        },
                        new
                        {
                            Id = 5,
                            Cost = 5000,
                            Name = "Formation React",
                            NbRound = 2,
                            SkillId = 5
                        },
                        new
                        {
                            Id = 6,
                            Cost = 5000,
                            Name = "Formation Angular",
                            NbRound = 2,
                            SkillId = 6
                        },
                        new
                        {
                            Id = 7,
                            Cost = 5000,
                            Name = "Formation Vue.js",
                            NbRound = 2,
                            SkillId = 7
                        },
                        new
                        {
                            Id = 8,
                            Cost = 5000,
                            Name = "Formation Node.js",
                            NbRound = 2,
                            SkillId = 8
                        },
                        new
                        {
                            Id = 9,
                            Cost = 5000,
                            Name = "Formation Express.js",
                            NbRound = 2,
                            SkillId = 9
                        },
                        new
                        {
                            Id = 10,
                            Cost = 5000,
                            Name = "Formation ASP.NET Core",
                            NbRound = 2,
                            SkillId = 10
                        },
                        new
                        {
                            Id = 11,
                            Cost = 5000,
                            Name = "Formation Ruby on Rails",
                            NbRound = 2,
                            SkillId = 11
                        },
                        new
                        {
                            Id = 12,
                            Cost = 5000,
                            Name = "Formation Django",
                            NbRound = 2,
                            SkillId = 12
                        },
                        new
                        {
                            Id = 13,
                            Cost = 5000,
                            Name = "Formation Flask",
                            NbRound = 2,
                            SkillId = 13
                        },
                        new
                        {
                            Id = 14,
                            Cost = 5000,
                            Name = "Formation PHP",
                            NbRound = 2,
                            SkillId = 14
                        },
                        new
                        {
                            Id = 15,
                            Cost = 5000,
                            Name = "Formation Laravel",
                            NbRound = 2,
                            SkillId = 15
                        },
                        new
                        {
                            Id = 16,
                            Cost = 5000,
                            Name = "Formation Spring Boot",
                            NbRound = 2,
                            SkillId = 16
                        },
                        new
                        {
                            Id = 17,
                            Cost = 5000,
                            Name = "Formation SQL",
                            NbRound = 2,
                            SkillId = 17
                        },
                        new
                        {
                            Id = 18,
                            Cost = 5000,
                            Name = "Formation NoSQL",
                            NbRound = 2,
                            SkillId = 18
                        },
                        new
                        {
                            Id = 19,
                            Cost = 5000,
                            Name = "Formation GraphQL",
                            NbRound = 2,
                            SkillId = 19
                        },
                        new
                        {
                            Id = 20,
                            Cost = 5000,
                            Name = "Formation REST APIs",
                            NbRound = 2,
                            SkillId = 20
                        });
                });

            modelBuilder.Entity("Server.Models.Company", b =>
                {
                    b.HasOne("Server.Models.Player", "Player")
                        .WithOne("Company")
                        .HasForeignKey("Server.Models.Company", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Server.Models.Consultant", b =>
                {
                    b.HasOne("Server.Models.Game", "Game")
                        .WithMany("Consultants")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Server.Models.LeveledSkill", "Skills", b1 =>
                        {
                            b1.Property<int>("ConsultantId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("Level")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ConsultantId", "Id");

                            b1.ToTable("consultants");

                            b1.ToJson("Skills");

                            b1.WithOwner()
                                .HasForeignKey("ConsultantId");
                        });

                    b.Navigation("Game");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Server.Models.Employee", b =>
                {
                    b.HasOne("Server.Models.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Server.Models.LeveledSkill", "Skills", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("Level")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EmployeeId", "Id");

                            b1.ToTable("employees");

                            b1.ToJson("Skills");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Company");

                    b.Navigation("Game");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Server.Models.InTraining", b =>
                {
                    b.HasOne("Server.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Round", "Round")
                        .WithMany()
                        .HasForeignKey("StartRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Round");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Server.Models.Player", b =>
                {
                    b.HasOne("Server.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Server.Models.Round", b =>
                {
                    b.HasOne("Server.Models.Game", "Game")
                        .WithMany("RoundsCollection")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Server.Models.RoundAction", "Actions", b1 =>
                        {
                            b1.Property<int>("RoundId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int?>("PlayerId")
                                .HasColumnType("integer");

                            b1.HasKey("RoundId", "Id");

                            b1.ToTable("rounds");

                            b1.ToJson("Actions");

                            b1.WithOwner()
                                .HasForeignKey("RoundId");
                        });

                    b.Navigation("Actions");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Server.Models.Training", b =>
                {
                    b.HasOne("Server.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Server.Models.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Server.Models.Game", b =>
                {
                    b.Navigation("Consultants");

                    b.Navigation("Players");

                    b.Navigation("RoundsCollection");
                });

            modelBuilder.Entity("Server.Models.Player", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
